// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetShower.Data;

#nullable disable

namespace PetShower.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231118061014_FinishModelsInitial")]
    partial class FinishModelsInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetShower.Domain.Models.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Service")
                        .HasColumnType("TEXT")
                        .HasColumnName("appointment_service");

                    b.Property<long>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("VeterinarianId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("PetShower.Domain.Models.Breed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("breeds", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2553),
                            Description = "Amigável e extrovertido",
                            IsDeleted = false,
                            Name = "Labrador Retriever",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2553)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2555),
                            Description = "Leal e protetor",
                            IsDeleted = false,
                            Name = "Pastor Alemão",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2555)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2556),
                            Description = "Inteligente e devoto",
                            IsDeleted = false,
                            Name = "Golden Retriever",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2557)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2558),
                            Description = "Adorável e sociável",
                            IsDeleted = false,
                            Name = "Bulldog Francês",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2558)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2560),
                            Description = "Inteligente e ativo",
                            IsDeleted = false,
                            Name = "Poodle",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2560)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2561),
                            Description = "Corajoso e confiável",
                            IsDeleted = false,
                            Name = "Rottweiler",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2562)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2563),
                            Description = "Amigável e determinado",
                            IsDeleted = false,
                            Name = "Bulldog Inglês",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2563)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2565),
                            Description = "Energético e independente",
                            IsDeleted = false,
                            Name = "Husky Siberiano",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2565)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2567),
                            Description = "Corajoso e curioso",
                            IsDeleted = false,
                            Name = "Dachshund",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2567)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2568),
                            Description = "Brincalhão e devotado",
                            IsDeleted = false,
                            Name = "Boxer",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2568)
                        });
                });

            modelBuilder.Entity("PetShower.Domain.Models.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("genders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2439),
                            IsDeleted = false,
                            Name = "Masculino",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2448)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2449),
                            IsDeleted = false,
                            Name = "Feminino",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2450)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2451),
                            IsDeleted = false,
                            Name = "Outro",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2451)
                        });
                });

            modelBuilder.Entity("PetShower.Domain.Models.Pet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BreedId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("GenderId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SpecieId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("GenderId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SpecieId");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("PetShower.Domain.Models.Specie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("species", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2583),
                            Description = "Mamífero doméstico conhecido pela lealdade",
                            IsDeleted = false,
                            Name = "Cachorro",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2583)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2585),
                            Description = "Animal de estimação doméstico conhecido pela independência",
                            IsDeleted = false,
                            Name = "Gato",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2585)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2587),
                            Description = "Pequeno mamífero herbívoro",
                            IsDeleted = false,
                            Name = "Coelho",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2587)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2588),
                            Description = "Ave de estimação com variadas espécies",
                            IsDeleted = false,
                            Name = "Pássaro",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2588)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2590),
                            Description = "Animal aquático variado",
                            IsDeleted = false,
                            Name = "Peixe",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2590)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2591),
                            Description = "Réptil com casco resistente",
                            IsDeleted = false,
                            Name = "Tartaruga",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2591)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2592),
                            Description = "Animal roedor com diferentes raças",
                            IsDeleted = false,
                            Name = "Porquinho-da-índia",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2593)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2594),
                            Description = "Roedor pequeno e popular como animal de estimação",
                            IsDeleted = false,
                            Name = "Hamster",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2594)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2595),
                            Description = "Mamífero carnívoro domesticado",
                            IsDeleted = false,
                            Name = "Furão",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2596)
                        });
                });

            modelBuilder.Entity("PetShower.Domain.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2608),
                            Description = "Consulta agendada",
                            IsDeleted = false,
                            Name = "Agendada",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2609)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2610),
                            Description = "Consulta concluída",
                            IsDeleted = false,
                            Name = "Concluída",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2610)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2612),
                            Description = "Consulta cancelada",
                            IsDeleted = false,
                            Name = "Cancelada",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2612)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2613),
                            Description = "Consulta remarcada",
                            IsDeleted = false,
                            Name = "Remarcada",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2614)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2615),
                            Description = "Consulta em andamento",
                            IsDeleted = false,
                            Name = "Em andamento",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2615)
                        });
                });

            modelBuilder.Entity("PetShower.Domain.Models.Veterinarian", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER")
                        .HasColumnName("age");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("GenderId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("veterinarians", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Age = 35,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2627),
                            GenderId = 1L,
                            IsDeleted = false,
                            Name = "Dr. João Silva",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2627)
                        },
                        new
                        {
                            Id = 2L,
                            Age = 40,
                            CreatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2629),
                            GenderId = 2L,
                            IsDeleted = false,
                            Name = "Dra. Maria Rodrigues",
                            UpdatedAt = new DateTime(2023, 11, 18, 3, 10, 14, 585, DateTimeKind.Local).AddTicks(2629)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetShower.Domain.Models.Appointment", b =>
                {
                    b.HasOne("PetShower.Domain.Models.Pet", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetShower.Domain.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetShower.Domain.Models.Veterinarian", "Veterinarian")
                        .WithMany()
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Status");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("PetShower.Domain.Models.Pet", b =>
                {
                    b.HasOne("PetShower.Domain.Models.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetShower.Domain.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetShower.Domain.Models.Specie", "Specie")
                        .WithMany()
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Gender");

                    b.Navigation("Owner");

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("PetShower.Domain.Models.Veterinarian", b =>
                {
                    b.HasOne("PetShower.Domain.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });
#pragma warning restore 612, 618
        }
    }
}
